#version 400 core

in vec2 textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[2];
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor[2];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitCameraVector = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);

	for(int i = 0; i<2; i++){
		vec3 unitLightVector = normalize(toLightVector[i]);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		
		float nDot = dot(unitNormal,unitLightVector);
		float brightness = max(nDot,0.0);
		
		float specularFactor = max(dot(reflectedLightDirection, unitCameraVector),0.2);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalSpecular = totalSpecular+dampedFactor*reflectivity*lightColor[i];
		
		totalDiffuse = totalDiffuse+brightness*lightColor[i];
	}
	totalDiffuse = max(totalDiffuse,0.2);
	
	out_Color = vec4(totalDiffuse,1.0)*texture(textureSampler,textureCoords);
	out_Color = mix(vec4(skyColor,1.0), out_Color, visibility);
	
}
