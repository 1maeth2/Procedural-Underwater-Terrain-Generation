#version 430 core

layout(triangles) in;
layout(triangle_strip,max_vertices = 3) out;

in vec2 pass_textureCoords[];
in vec3 pass_toLightVector[][2];
in vec3 pass_toCameraVector[];
in vec4 pass_worldPosition[];
in float pass_visibility[];

out vec2 textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[2];
out vec3 toCameraVector;
out float visibility;

vec3 calculateTriangleNormal(){//try and multiply positions by projection view matrix
	vec3 A = pass_worldPosition[1].xyz-pass_worldPosition[0].xyz;
	vec3 B = pass_worldPosition[2].xyz-pass_worldPosition[0].xyz;

	vec3 normal = cross(A,B);
	return normal;
}
void main(void){
	vec3 normal = calculateTriangleNormal();
	for(int i = 0; i<3; i++){
		gl_Position = gl_in[i].gl_Position;
		textureCoords = pass_textureCoords[i];
		toLightVector = pass_toLightVector[i];
		toCameraVector = pass_toCameraVector[i];
		surfaceNormal = normal*vec3(1.0,1.0,-1.0);
		visibility = pass_visibility[i];
		EmitVertex();
	}
	EndPrimitive();
}