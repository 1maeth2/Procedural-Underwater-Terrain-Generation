#version 430 core

layout  (local_size_x  =  10, local_size_y  =  10, local_size_z  =  10)  in;

layout(std430, binding=0) buffer Pos3D{
    float positions[];
};
layout(std430, binding=1) buffer tmap{
    float terrainMap[];
};
layout(std430, binding=2) buffer table{
    float triTable[];
};

uniform float x_size;
uniform float y_size;

uniform float size;

uniform float surfaceLevel;

vec3 cornerTable[8] ={
		vec3(0,0,0),
		vec3(1,0,0),
		vec3(1,0,1),
		vec3(0,0,1),
		vec3(0,1,0),
		vec3(1,1,0),
		vec3(1,1,1),
		vec3(0,1,1),
};
int edges[12][2]={
		{0,1},
		{1,2},
		{2,3},
		{3,0},
		{4,5},
		{5,6},
		{6,7},
		{7,4},
		{0,4},
		{1,5},
		{2,6},
		{3,7},
		
};


int getPosition(vec3 v){
	return int(v.x+v.y*x_size*x_size+v.z*x_size);
}

int configIndex(float cube[8]){
	int configIndex = 0;
	for(int i = 0; i<8; i++){
		if(cube[i] > surfaceLevel){
			configIndex |= 1 << i;
		}
	}		
	return configIndex;
}


vec3 smoothPoint(vec3 vert1, vec3 vert2, int indice, float cube[8]){
	float sampleVert1 = cube[edges[indice][0]];
	float sampleVert2 = cube[edges[indice][1]];
	
	float difference = sampleVert1-sampleVert2;
	
	if(difference == 0){
		difference = surfaceLevel;
	}else{
		difference = (surfaceLevel-sampleVert1)/difference;
	}
	vec3 a2 = (vert1-vert2)*difference;
	
	vec3 vertPos = vert1+a2;

	return vertPos;
}
float[48] marchCube(vec3 position){
	//create cube
	float cube[8];
	float vertexes[48];
	for(int i = 0; i<8; i++){		
		vec3 corner = position + cornerTable[i];		
		cube[i] = terrainMap[int(corner.x+corner.y*(x_size+1)*(x_size+1)+corner.z*(x_size+1))];		
	}
	int currentConfigIndex = configIndex(cube);	
	for(int i = 0; i<16; i++){
		int indice = int(triTable[16*currentConfigIndex+i]);
		if(indice == -1){
			vertexes[i*3] = -1;
			vertexes[i*3+1] = -1;
			vertexes[i*3+2] = -1;
		}else{
			vec3 vert1 = position + cornerTable[edges[indice][1]];
			vec3 vert2 = position + cornerTable[edges[indice][0]];			
			vec3 vertPos = smoothPoint(vert1, vert2, indice, cube);	
			
			vertexes[i*3] = vertPos.x*size;
			vertexes[i*3+1] = vertPos.y*size;
			vertexes[i*3+2] = vertPos.z*size;
		}
	}
	//search through index
	
	return vertexes;
}

void main(){
	if(gl_GlobalInvocationID.x < x_size && gl_GlobalInvocationID.y < y_size && gl_GlobalInvocationID.z < x_size){
		float vertex[48] = marchCube(gl_GlobalInvocationID);
		for(int i = 0; i<vertex.length(); i++){
	  	 	positions[getPosition(gl_GlobalInvocationID)*48+i] = vertex[i];
	   	}
	}
}